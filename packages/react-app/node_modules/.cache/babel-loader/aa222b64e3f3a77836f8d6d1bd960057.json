{"ast":null,"code":"var _jsxFileName = \"/Users/upalc/Documents/ethglobal/project/dethLockapp/packages/react-app/src/components/Wallet.jsx\";\nimport React, { useState } from \"react\";\nimport { WalletOutlined, QrcodeOutlined, SendOutlined, KeyOutlined } from \"@ant-design/icons\";\nimport { Tooltip, Spin, Modal, Button, Typography } from \"antd\";\nimport QR from \"qrcode.react\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport AddressInput from \"./AddressInput\";\nimport EtherInput from \"./EtherInput\";\nconst {\n  Text,\n  Paragraph\n} = Typography;\n/*\n\n  Wallet UI for sending, receiving, and extracting the burner wallet\n\n  <Wallet\n    address={address}\n    provider={userProvider}\n    ensProvider={mainnetProvider}\n    price={price}\n  />\n\n*/\n\nexport default function Wallet(props) {\n  const signerAddress = useUserAddress(props.provider);\n  const selectedAddress = props.address || signerAddress;\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n  const providerSend = props.provider ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Wallet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WalletOutlined, {\n    onClick: () => {\n      setOpen(!open);\n    },\n    rotate: -90,\n    style: {\n      padding: 7,\n      color: props.color ? props.color : \"#1890ff\",\n      cursor: \"pointer\",\n      fontSize: 28,\n      verticalAlign: \"middle\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  })) : \"\";\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n\n  if (qr) {\n    display = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      copyable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, selectedAddress)), /*#__PURE__*/React.createElement(QR, {\n      value: selectedAddress,\n      size: \"450\",\n      level: \"H\",\n      includeMargin: true,\n      renderAs: \"svg\",\n      imageSettings: {\n        excavate: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }));\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }), \" Hide\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(selectedAddress);\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }), \" Private Key\");\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      }, \"*injected account*, private key unknown\"));\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push( /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          fontSize: 16,\n          padding: 2,\n          backgroundStyle: \"#89e789\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"/pk#\" + pk,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Address, {\n        minimized: true,\n        value: wallet.address,\n        ensProvider: props.ensProvider,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }), \" \", wallet.address.substr(0, 6))));\n\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n\n          if (!extraPkDisplayAdded[pastwallet.address]\n          /* && selectedAddress!=pastwallet.address */\n          ) {\n              extraPkDisplayAdded[pastwallet.address] = true;\n              extraPkDisplay.push( /*#__PURE__*/React.createElement(\"div\", {\n                style: {\n                  fontSize: 16\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 15\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                href: \"/pk#\" + pastpk,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 17\n                }\n              }, /*#__PURE__*/React.createElement(Address, {\n                minimized: true,\n                value: pastwallet.address,\n                ensProvider: props.ensProvider,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 19\n                }\n              }), \" \", pastwallet.address.substr(0, 6))));\n            }\n        }\n      }\n\n      display = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }\n      }, \"Private Key:\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        copyable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, pk)), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      }, \"Point your camera phone at qr code to open in\", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://xdai.io/\" + pk,\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }\n      }, \"burner wallet\"), \":\"), /*#__PURE__*/React.createElement(QR, {\n        value: \"https://xdai.io/\" + pk,\n        size: \"450\",\n        level: \"H\",\n        includeMargin: true,\n        renderAs: \"svg\",\n        imageSettings: {\n          excavate: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Paragraph, {\n        style: {\n          fontSize: \"16\"\n        },\n        copyable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }\n      }, \"https://xdai.io/\" + pk), extraPkDisplay ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }\n      }, \"Known Private Keys:\"), extraPkDisplay, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => {\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n\n          if (currentPrivateKey) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n\n          const randomWallet = ethers.Wallet.createRandom();\n\n          const privateKey = randomWallet._signingKey().privateKey;\n\n          window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n          window.location.reload();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }\n      }, \"Generate\")) : \"\");\n    }\n\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"receive\",\n      onClick: () => {\n        setQr(selectedAddress);\n        setPK(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }), \" Receive\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(\"\");\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }), \" Hide\");\n  } else {\n    const inputStyle = {\n      padding: 10\n    };\n    display = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: inputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AddressInput, {\n      autoFocus: true,\n      ensProvider: props.ensProvider,\n      placeholder: \"to address\",\n      value: toAddress,\n      onChange: setToAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: inputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EtherInput, {\n      price: props.price,\n      value: amount,\n      onChange: value => {\n        setAmount(value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    })));\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"receive\",\n      onClick: () => {\n        setQr(selectedAddress);\n        setPK(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }\n    }), \" Receive\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(selectedAddress);\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }\n    }), \" Private Key\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 5\n    }\n  }, providerSend, /*#__PURE__*/React.createElement(Modal, {\n    visible: open,\n    title: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }\n    }, selectedAddress ? /*#__PURE__*/React.createElement(Address, {\n      value: selectedAddress,\n      ensProvider: props.ensProvider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 32\n      }\n    }) : /*#__PURE__*/React.createElement(Spin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 102\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: \"right\",\n        paddingRight: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Balance, {\n      address: selectedAddress,\n      provider: props.provider,\n      dollarMultiplier: props.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 15\n      }\n    }))),\n    onOk: () => {\n      setQr();\n      setPK();\n      setOpen(!open);\n    },\n    onCancel: () => {\n      setQr();\n      setPK();\n      setOpen(!open);\n    },\n    footer: [privateKeyButton, receiveButton, /*#__PURE__*/React.createElement(Button, {\n      key: \"submit\",\n      type: \"primary\",\n      disabled: !amount || !toAddress || qr,\n      loading: false,\n      onClick: () => {\n        const tx = Transactor(props.provider);\n        let value;\n\n        try {\n          value = parseEther(\"\" + amount);\n        } catch (e) {\n          // failed to parseEther, try something else\n          value = parseEther(\"\" + parseFloat(amount).toFixed(8));\n        }\n\n        tx({\n          to: toAddress,\n          value\n        });\n        setOpen(!open);\n        setQr();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SendOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }\n    }), \" Send\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }, display));\n}","map":{"version":3,"sources":["/Users/upalc/Documents/ethglobal/project/dethLockapp/packages/react-app/src/components/Wallet.jsx"],"names":["React","useState","WalletOutlined","QrcodeOutlined","SendOutlined","KeyOutlined","Tooltip","Spin","Modal","Button","Typography","QR","parseEther","useUserAddress","ethers","Transactor","Address","Balance","AddressInput","EtherInput","Text","Paragraph","Wallet","props","signerAddress","provider","selectedAddress","address","open","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","padding","color","cursor","fontSize","verticalAlign","display","receiveButton","privateKeyButton","excavate","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","ensProvider","substr","key","indexOf","console","log","pastpk","pastwallet","currentPrivateKey","window","setItem","Date","now","randomWallet","createRandom","privateKey","_signingKey","location","reload","inputStyle","price","value","float","paddingRight","tx","e","parseFloat","toFixed","to"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,YAAzC,EAAuDC,WAAvD,QAA0E,mBAA1E;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,UAAvC,QAAyD,MAAzD;AACA,OAAOC,EAAP,MAAe,cAAf;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAsBX,UAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASY,MAAT,CAAgBC,KAAhB,EAAuB;AACpC,QAAMC,aAAa,GAAGX,cAAc,CAACU,KAAK,CAACE,QAAP,CAApC;AACA,QAAMC,eAAe,GAAGH,KAAK,CAACI,OAAN,IAAiBH,aAAzC;AAEA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkB5B,QAAQ,EAAhC;AACA,QAAM,CAAC6B,EAAD,EAAKC,KAAL,IAAc9B,QAAQ,EAA5B;AACA,QAAM,CAAC+B,MAAD,EAASC,SAAT,IAAsBhC,QAAQ,EAApC;AACA,QAAM,CAACiC,SAAD,EAAYC,YAAZ,IAA4BlC,QAAQ,EAA1C;AACA,QAAM,CAACmC,EAAD,EAAKC,KAAL,IAAcpC,QAAQ,EAA5B;AAEA,QAAMqC,YAAY,GAAGf,KAAK,CAACE,QAAN,gBACnB,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACbI,MAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,KAHH;AAIE,IAAA,MAAM,EAAE,CAAC,EAJX;AAKE,IAAA,KAAK,EAAE;AACLW,MAAAA,OAAO,EAAE,CADJ;AAELC,MAAAA,KAAK,EAAEjB,KAAK,CAACiB,KAAN,GAAcjB,KAAK,CAACiB,KAApB,GAA4B,SAF9B;AAGLC,MAAAA,MAAM,EAAE,SAHH;AAILC,MAAAA,QAAQ,EAAE,EAJL;AAKLC,MAAAA,aAAa,EAAE;AALV,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADmB,GAiBnB,EAjBF;AAoBA,MAAIC,OAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,gBAAJ;;AACA,MAAIhB,EAAJ,EAAQ;AACNc,IAAAA,OAAO,gBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,QAAQ,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBlB,eAAhB,CADF,CADF,eAIE,oBAAC,EAAD;AACE,MAAA,KAAK,EAAEA,eADT;AAEE,MAAA,IAAI,EAAC,KAFP;AAGE,MAAA,KAAK,EAAC,GAHR;AAIE,MAAA,aAAa,MAJf;AAKE,MAAA,QAAQ,EAAC,KALX;AAME,MAAA,aAAa,EAAE;AAAEqB,QAAAA,QAAQ,EAAE;AAAZ,OANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAeAF,IAAAA,aAAa,gBACX,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,MADN;AAEE,MAAA,OAAO,EAAE,MAAM;AACbd,QAAAA,KAAK,CAAC,EAAD,CAAL;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,UADF;AAUAe,IAAAA,gBAAgB,gBACd,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,MADN;AAEE,MAAA,OAAO,EAAE,MAAM;AACbT,QAAAA,KAAK,CAACX,eAAD,CAAL;AACAK,QAAAA,KAAK,CAAC,EAAD,CAAL;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,iBADF;AAWD,GArCD,MAqCO,IAAIK,EAAJ,EAAQ;AACb,UAAMA,EAAE,GAAGY,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAX;AACA,UAAMC,MAAM,GAAG,IAAIpC,MAAM,CAACQ,MAAX,CAAkBc,EAAlB,CAAf;;AAEA,QAAIc,MAAM,CAACvB,OAAP,KAAmBD,eAAvB,EAAwC;AACtCkB,MAAAA,OAAO,gBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADF,CADF;AAKD,KAND,MAMO;AACL,YAAMO,mBAAmB,GAAG,EAA5B;AACA,YAAMC,cAAc,GAAG,EAAvB;AACAD,MAAAA,mBAAmB,CAACD,MAAM,CAACvB,OAAR,CAAnB,GAAsC,IAAtC;AACAyB,MAAAA,cAAc,CAACC,IAAf,eACE;AAAK,QAAA,KAAK,EAAE;AAAEX,UAAAA,QAAQ,EAAE,EAAZ;AAAgBH,UAAAA,OAAO,EAAE,CAAzB;AAA4Be,UAAAA,eAAe,EAAE;AAA7C,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAG,QAAA,IAAI,EAAE,SAASlB,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,OAAD;AAAS,QAAA,SAAS,MAAlB;AAAmB,QAAA,KAAK,EAAEc,MAAM,CAACvB,OAAjC;AAA0C,QAAA,WAAW,EAAEJ,KAAK,CAACgC,WAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,OACgFL,MAAM,CAACvB,OAAP,CAAe6B,MAAf,CAAsB,CAAtB,EAAyB,CAAzB,CADhF,CADF,CADF;;AAOA,WAAK,MAAMC,GAAX,IAAkBT,YAAlB,EAAgC;AAC9B,YAAIS,GAAG,CAACC,OAAJ,CAAY,uBAAZ,KAAwC,CAA5C,EAA+C;AAC7CC,UAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,gBAAMI,MAAM,GAAGb,YAAY,CAACC,OAAb,CAAqBQ,GAArB,CAAf;AACA,gBAAMK,UAAU,GAAG,IAAIhD,MAAM,CAACQ,MAAX,CAAkBuC,MAAlB,CAAnB;;AACA,cAAI,CAACV,mBAAmB,CAACW,UAAU,CAACnC,OAAZ;AAAqB;AAA7C,YAA2F;AACzFwB,cAAAA,mBAAmB,CAACW,UAAU,CAACnC,OAAZ,CAAnB,GAA0C,IAA1C;AACAyB,cAAAA,cAAc,CAACC,IAAf,eACE;AAAK,gBAAA,KAAK,EAAE;AAAEX,kBAAAA,QAAQ,EAAE;AAAZ,iBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACE;AAAG,gBAAA,IAAI,EAAE,SAASmB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACE,oBAAC,OAAD;AAAS,gBAAA,SAAS,MAAlB;AAAmB,gBAAA,KAAK,EAAEC,UAAU,CAACnC,OAArC;AAA8C,gBAAA,WAAW,EAAEJ,KAAK,CAACgC,WAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EACmF,GADnF,EAEGO,UAAU,CAACnC,OAAX,CAAmB6B,MAAnB,CAA0B,CAA1B,EAA6B,CAA7B,CAFH,CADF,CADF;AAQD;AACF;AACF;;AAEDZ,MAAAA,OAAO,gBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgBR,EAAhB,CADF,CAHF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAEE;AAAG,QAAA,MAAM,EAAC,QAAV;AAAmB,QAAA,IAAI,EAAE,qBAAqBA,EAA9C;AAAkD,QAAA,GAAG,EAAC,qBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,MATF,eAgBE,oBAAC,EAAD;AACE,QAAA,KAAK,EAAE,qBAAqBA,EAD9B;AAEE,QAAA,IAAI,EAAC,KAFP;AAGE,QAAA,KAAK,EAAC,GAHR;AAIE,QAAA,aAAa,MAJf;AAKE,QAAA,QAAQ,EAAC,KALX;AAME,QAAA,aAAa,EAAE;AAAEW,UAAAA,QAAQ,EAAE;AAAZ,SANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBF,eAyBE,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAAEL,UAAAA,QAAQ,EAAE;AAAZ,SAAlB;AAAsC,QAAA,QAAQ,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,qBAAqBN,EADxB,CAzBF,EA6BGgB,cAAc,gBACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEGA,cAFH,eAGE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAE,MAAM;AACb,gBAAMW,iBAAiB,GAAGC,MAAM,CAAChB,YAAP,CAAoBC,OAApB,CAA4B,gBAA5B,CAA1B;;AACA,cAAIc,iBAAJ,EAAuB;AACrBC,YAAAA,MAAM,CAAChB,YAAP,CAAoBiB,OAApB,CAA4B,0BAA0BC,IAAI,CAACC,GAAL,EAAtD,EAAkEJ,iBAAlE;AACD;;AACD,gBAAMK,YAAY,GAAGtD,MAAM,CAACQ,MAAP,CAAc+C,YAAd,EAArB;;AACA,gBAAMC,UAAU,GAAGF,YAAY,CAACG,WAAb,GAA2BD,UAA9C;;AACAN,UAAAA,MAAM,CAAChB,YAAP,CAAoBiB,OAApB,CAA4B,gBAA5B,EAA8CK,UAA9C;AACAN,UAAAA,MAAM,CAACQ,QAAP,CAAgBC,MAAhB;AACD,SAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,CADa,GAoBb,EAjDJ,CADF;AAsDD;;AAED5B,IAAAA,aAAa,gBACX,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,SADN;AAEE,MAAA,OAAO,EAAE,MAAM;AACbd,QAAAA,KAAK,CAACL,eAAD,CAAL;AACAW,QAAAA,KAAK,CAAC,EAAD,CAAL;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,aADF;AAWAS,IAAAA,gBAAgB,gBACd,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,MADN;AAEE,MAAA,OAAO,EAAE,MAAM;AACbT,QAAAA,KAAK,CAAC,EAAD,CAAL;AACAN,QAAAA,KAAK,CAAC,EAAD,CAAL;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,UADF;AAWD,GAtHM,MAsHA;AACL,UAAM2C,UAAU,GAAG;AACjBnC,MAAAA,OAAO,EAAE;AADQ,KAAnB;AAIAK,IAAAA,OAAO,gBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,KAAK,EAAE8B,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,WAAW,EAAEnD,KAAK,CAACgC,WAFrB;AAGE,MAAA,WAAW,EAAC,YAHd;AAIE,MAAA,KAAK,EAAErB,SAJT;AAKE,MAAA,QAAQ,EAAEC,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAUE;AAAK,MAAA,KAAK,EAAEuC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AACE,MAAA,KAAK,EAAEnD,KAAK,CAACoD,KADf;AAEE,MAAA,KAAK,EAAE3C,MAFT;AAGE,MAAA,QAAQ,EAAE4C,KAAK,IAAI;AACjB3C,QAAAA,SAAS,CAAC2C,KAAD,CAAT;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CADF;AAsBA/B,IAAAA,aAAa,gBACX,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,SADN;AAEE,MAAA,OAAO,EAAE,MAAM;AACbd,QAAAA,KAAK,CAACL,eAAD,CAAL;AACAW,QAAAA,KAAK,CAAC,EAAD,CAAL;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,aADF;AAWAS,IAAAA,gBAAgB,gBACd,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,MADN;AAEE,MAAA,OAAO,EAAE,MAAM;AACbT,QAAAA,KAAK,CAACX,eAAD,CAAL;AACAK,QAAAA,KAAK,CAAC,EAAD,CAAL;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,iBADF;AAWD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,YADH,eAEE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAEV,IADX;AAEE,IAAA,KAAK,eACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,eAAe,gBAAG,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAEA,eAAhB;AAAiC,MAAA,WAAW,EAAEH,KAAK,CAACgC,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,gBAAyE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD3F,eAEE;AAAK,MAAA,KAAK,EAAE;AAAEsB,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,YAAY,EAAE;AAAhC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAEpD,eAAlB;AAAmC,MAAA,QAAQ,EAAEH,KAAK,CAACE,QAAnD;AAA6D,MAAA,gBAAgB,EAAEF,KAAK,CAACoD,KAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,CAHJ;AAUE,IAAA,IAAI,EAAE,MAAM;AACV5C,MAAAA,KAAK;AACLM,MAAAA,KAAK;AACLR,MAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,KAdH;AAeE,IAAA,QAAQ,EAAE,MAAM;AACdG,MAAAA,KAAK;AACLM,MAAAA,KAAK;AACLR,MAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,KAnBH;AAoBE,IAAA,MAAM,EAAE,CACNkB,gBADM,EAEND,aAFM,eAGN,oBAAC,MAAD;AACE,MAAA,GAAG,EAAC,QADN;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,QAAQ,EAAE,CAACb,MAAD,IAAW,CAACE,SAAZ,IAAyBJ,EAHrC;AAIE,MAAA,OAAO,EAAE,KAJX;AAKE,MAAA,OAAO,EAAE,MAAM;AACb,cAAMiD,EAAE,GAAGhE,UAAU,CAACQ,KAAK,CAACE,QAAP,CAArB;AAEA,YAAImD,KAAJ;;AACA,YAAI;AACFA,UAAAA,KAAK,GAAGhE,UAAU,CAAC,KAAKoB,MAAN,CAAlB;AACD,SAFD,CAEE,OAAOgD,CAAP,EAAU;AACV;AACAJ,UAAAA,KAAK,GAAGhE,UAAU,CAAC,KAAKqE,UAAU,CAACjD,MAAD,CAAV,CAAmBkD,OAAnB,CAA2B,CAA3B,CAAN,CAAlB;AACD;;AAEDH,QAAAA,EAAE,CAAC;AACDI,UAAAA,EAAE,EAAEjD,SADH;AAED0C,UAAAA;AAFC,SAAD,CAAF;AAIA/C,QAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACAG,QAAAA,KAAK;AACN,OAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAwBE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBF,UAHM,CApBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmDGa,OAnDH,CAFF,CADF;AA0DD","sourcesContent":["import React, { useState } from \"react\";\nimport { WalletOutlined, QrcodeOutlined, SendOutlined, KeyOutlined } from \"@ant-design/icons\";\nimport { Tooltip, Spin, Modal, Button, Typography } from \"antd\";\nimport QR from \"qrcode.react\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport AddressInput from \"./AddressInput\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n\n  Wallet UI for sending, receiving, and extracting the burner wallet\n\n  <Wallet\n    address={address}\n    provider={userProvider}\n    ensProvider={mainnetProvider}\n    price={price}\n  />\n\n*/\n\nexport default function Wallet(props) {\n  const signerAddress = useUserAddress(props.provider);\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"#1890ff\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized value={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized value={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            value={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address value={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.provider);\n\n              let value;\n              try {\n                value = parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}