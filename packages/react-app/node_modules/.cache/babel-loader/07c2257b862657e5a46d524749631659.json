{"ast":null,"code":"var _jsxFileName = \"/Users/upalc/Documents/ethglobal/project/deapp/packages/react-app/src/components/Balance.jsx\";\nimport React, { useState } from \"react\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { usePoller } from \"eth-hooks\";\n/*\n\n  <Balance\n    address={selectedAddress}\n    provider={props.provider}\n    dollarMultiplier={props.price}\n  />\n\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n  const [balance, setBalance] = useState();\n\n  const getBalance = async () => {\n    if (props.address && props.provider) {\n      try {\n        const newBalance = await props.provider.getBalance(props.address);\n        setBalance(newBalance);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  usePoller(() => {\n    getBalance();\n  }, props.pollTime ? props.pollTime : 1999);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n\n  if (usingBalance) {\n    const etherBalance = formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  if (props.dollarMultiplier && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * props.dollarMultiplier).toFixed(2);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      verticalAlign: \"middle\",\n      fontSize: props.size ? props.size : 24,\n      padding: 8,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setDollarMode(!dollarMode);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, displayBalance);\n}","map":{"version":3,"sources":["/Users/upalc/Documents/ethglobal/project/deapp/packages/react-app/src/components/Balance.jsx"],"names":["React","useState","formatEther","usePoller","Balance","props","dollarMode","setDollarMode","balance","setBalance","getBalance","address","provider","newBalance","e","console","log","pollTime","floatBalance","parseFloat","usingBalance","etherBalance","toFixed","displayBalance","dollarMultiplier","verticalAlign","fontSize","size","padding","cursor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;;AAEA,QAAMS,UAAU,GAAG,YAAY;AAC7B,QAAIL,KAAK,CAACM,OAAN,IAAiBN,KAAK,CAACO,QAA3B,EAAqC;AACnC,UAAI;AACF,cAAMC,UAAU,GAAG,MAAMR,KAAK,CAACO,QAAN,CAAeF,UAAf,CAA0BL,KAAK,CAACM,OAAhC,CAAzB;AACAF,QAAAA,UAAU,CAACI,UAAD,CAAV;AACD,OAHD,CAGE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AACF,GATD;;AAWAX,EAAAA,SAAS,CACP,MAAM;AACJO,IAAAA,UAAU;AACX,GAHM,EAIPL,KAAK,CAACY,QAAN,GAAiBZ,KAAK,CAACY,QAAvB,GAAkC,IAJ3B,CAAT;AAOA,MAAIC,YAAY,GAAGC,UAAU,CAAC,MAAD,CAA7B;AAEA,MAAIC,YAAY,GAAGZ,OAAnB;;AAEA,MAAI,OAAOH,KAAK,CAACG,OAAb,KAAyB,WAA7B,EAA0C;AACxCY,IAAAA,YAAY,GAAGf,KAAK,CAACG,OAArB;AACD;;AAED,MAAIY,YAAJ,EAAkB;AAChB,UAAMC,YAAY,GAAGnB,WAAW,CAACkB,YAAD,CAAhC;AACAD,IAAAA,UAAU,CAACE,YAAD,CAAV,CAAyBC,OAAzB,CAAiC,CAAjC;AACAJ,IAAAA,YAAY,GAAGC,UAAU,CAACE,YAAD,CAAzB;AACD;;AAED,MAAIE,cAAc,GAAGL,YAAY,CAACI,OAAb,CAAqB,CAArB,CAArB;;AAEA,MAAIjB,KAAK,CAACmB,gBAAN,IAA0BlB,UAA9B,EAA0C;AACxCiB,IAAAA,cAAc,GAAG,MAAM,CAACL,YAAY,GAAGb,KAAK,CAACmB,gBAAtB,EAAwCF,OAAxC,CAAgD,CAAhD,CAAvB;AACD;;AAED,sBACE;AACE,IAAA,KAAK,EAAE;AACLG,MAAAA,aAAa,EAAE,QADV;AAELC,MAAAA,QAAQ,EAAErB,KAAK,CAACsB,IAAN,GAAatB,KAAK,CAACsB,IAAnB,GAA0B,EAF/B;AAGLC,MAAAA,OAAO,EAAE,CAHJ;AAILC,MAAAA,MAAM,EAAE;AAJH,KADT;AAOE,IAAA,OAAO,EAAE,MAAM;AACbtB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGiB,cAXH,CADF;AAeD","sourcesContent":["import React, { useState } from \"react\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { usePoller } from \"eth-hooks\";\n\n/*\n\n  <Balance\n    address={selectedAddress}\n    provider={props.provider}\n    dollarMultiplier={props.price}\n  />\n\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n  const [balance, setBalance] = useState();\n\n  const getBalance = async () => {\n    if (props.address && props.provider) {\n      try {\n        const newBalance = await props.provider.getBalance(props.address);\n        setBalance(newBalance);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  usePoller(\n    () => {\n      getBalance();\n    },\n    props.pollTime ? props.pollTime : 1999,\n  );\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n\n  if (usingBalance) {\n    const etherBalance = formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  if (props.dollarMultiplier && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * props.dollarMultiplier).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}