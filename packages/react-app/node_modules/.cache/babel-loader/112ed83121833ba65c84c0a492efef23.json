{"ast":null,"code":"var _jsxFileName = \"/Users/upalc/Documents/ethglobal/project/dethLockapp/packages/react-app/src/views/Manage.jsx\";\n\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Radio, Button, Table, Divider } from \"antd\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { formatEther } from \"@ethersproject/units\";\nimport fetch from \"isomorphic-fetch\";\nimport GraphiQL from \"graphiql\";\nimport { Address } from \"../components\";\nimport \"graphiql/graphiql.min.css\";\n\nfunction Manage(props) {\n  const [query, setQuery] = useState(\"All\");\n  const ts = Math.floor(new Date().getTime() / 1000);\n\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(graphQLParams)\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    wills(first: 25, orderBy: deadline, orderDirection: desc) {\n      index\n      owner\n      beneficiary\n      deadline\n      value\n      token\n      tokenBalance\n    }\n  }\n  `;\n  const queries = {\n    All: `\n  {\n    wills(first: 25, orderBy: deadline, orderDirection: desc) {\n      index\n      owner\n      beneficiary\n      deadline\n      value\n    }\n  }\n  `,\n    owner: `\n  query Will($address:Bytes!){\n      wills(first: 25, orderBy: deadline, orderDirection: desc, where:{owner:$address}) {\n      index\n      owner\n      beneficiary\n      deadline\n      value\n    }\n  }\n  `,\n    beneficiary: `\n  query Will($address:Bytes!){\n      wills(first: 25, orderBy: deadline, orderDirection: desc,where:{beneficiary:$address}) {\n      index\n      owner\n      beneficiary\n      deadline\n      value\n    }\n  }\n  `\n  };\n  const QUERY_GQL = gql(queries[query]);\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_GQL, {\n    variables: {\n      address: props.address.toLowerCase()\n    },\n    pollInterval: 10000\n  });\n  console.log(loading);\n  const willsColumns = [{\n    title: \"Will\",\n    dataIndex: \"index\",\n    key: \"index\",\n    render: record => /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }\n    }, record)\n  }, {\n    title: \"Owner\",\n    key: \"owner\",\n    render: record => /*#__PURE__*/React.createElement(Address, {\n      value: record.owner,\n      ensProvider: props.mainnetProvider,\n      fontSize: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    })\n  }, {\n    title: \"TimeLock\",\n    key: \"deadline\",\n    dataIndex: \"deadline\",\n    render: record => new Date(record * 1000).toISOString()\n  }, {\n    title: \"Beneficiary\",\n    key: \"beneficiary\",\n    render: record => /*#__PURE__*/React.createElement(Address, {\n      value: record.beneficiary,\n      ensProvider: props.mainnetProvider,\n      fontSize: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    })\n  }, {\n    title: \"Balance ETH\",\n    key: \"value\",\n    dataIndex: \"value\",\n    render: record => /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, formatEther(record))\n  }, {\n    title: \"Token\",\n    key: \"token\",\n    dataIndex: \"token\",\n    render: record => /*#__PURE__*/React.createElement(Address, {\n      value: record,\n      fontSize: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }\n    })\n  }, {\n    title: \"Amount Token\",\n    key: \"tokenBalance\",\n    dataIndex: \"tokenBalance\",\n    render: record => /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, record)\n  }, {\n    title: \"Actions\",\n    // key: 'actions',\n    render: record => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: record.owner.toLowerCase() !== props.address.toLowerCase(),\n      onClick: async () => {\n        const totalBalance = await props.readContracts.Noun.ethBalance(record.index - 1);\n        await props.tx({\n          to: props.writeContracts.Noun.address,\n          data: props.writeContracts.Noun.interface.encodeFunctionData(\"defundWillETH(uint256, address payable , uint256)\", [record.index - 1, props.address, totalBalance])\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, \"withdraw\"), /*#__PURE__*/React.createElement(Button, {\n      disabled: record.beneficiary.toLowerCase() !== props.address.toLowerCase() || ts < record.deadline || record.value === 0,\n      onClick: async () => {\n        const totalBalance = await props.readContracts.Noun.ethBalance(record.index - 1);\n        await props.tx({\n          to: props.writeContracts.Noun.address,\n          data: props.writeContracts.Noun.interface.encodeFunctionData(\"BenefitETH(uint256, address payable , uint256)\", [record.index - 1, props.address, totalBalance])\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, \"claim\"), /*#__PURE__*/React.createElement(Button, {\n      disabled: record.owner.toLowerCase() !== props.address.toLowerCase(),\n      onClick: () => {\n        const index = record.index - 1;\n        props.willSelector(index);\n      } //\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, \"Update\"))\n  }];\n  const radioStyle = {\n    display: \"block\",\n    height: \"30px\",\n    lineHeight: \"30px\"\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    onChange: e => {\n      setQuery(e.target.value);\n    },\n    value: query,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Radio, {\n    style: radioStyle,\n    value: \"All\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }, \"All wills\"), /*#__PURE__*/React.createElement(Radio, {\n    style: radioStyle,\n    value: \"owner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, \"My wills\"), /*#__PURE__*/React.createElement(Radio, {\n    style: radioStyle,\n    value: \"beneficiary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, \"My inheritances\")), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }), data ? /*#__PURE__*/React.createElement(Table, {\n    dataSource: data.wills,\n    columns: willsColumns,\n    rowKey: \"index\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }\n  }) : \"Loading..\", /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, \"Current timestamp: \", ts || \"loading..\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: 32,\n      height: 400,\n      border: \"1px solid #888888\",\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GraphiQL, {\n    fetcher: graphQLFetcher,\n    docExplorerOpen: true,\n    query: EXAMPLE_GRAPHQL,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Manage;","map":{"version":3,"sources":["/Users/upalc/Documents/ethglobal/project/dethLockapp/packages/react-app/src/views/Manage.jsx"],"names":["React","useState","Radio","Button","Table","Divider","useQuery","gql","formatEther","fetch","GraphiQL","Address","Manage","props","query","setQuery","ts","Math","floor","Date","getTime","graphQLFetcher","graphQLParams","subgraphUri","method","headers","body","JSON","stringify","then","response","json","EXAMPLE_GRAPHQL","queries","All","owner","beneficiary","QUERY_GQL","loading","data","variables","address","toLowerCase","pollInterval","console","log","willsColumns","title","dataIndex","key","render","record","mainnetProvider","toISOString","totalBalance","readContracts","Noun","ethBalance","index","tx","to","writeContracts","interface","encodeFunctionData","deadline","value","willSelector","radioStyle","display","height","lineHeight","e","target","wills","margin","border","textAlign"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,oBAAP;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,OAA/B,QAA8C,MAA9C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAO,2BAAP;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMe,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CAAX;;AAEA,WAASC,cAAT,CAAwBC,aAAxB,EAAuC;AACrC,WAAOb,KAAK,CAACI,KAAK,CAACU,WAAP,EAAoB;AAC9BC,MAAAA,MAAM,EAAE,MADsB;AAE9BC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFqB;AAG9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,aAAf;AAHwB,KAApB,CAAL,CAIJO,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,CAAP;AAKD;;AAED,QAAMC,eAAe,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;AAcA,QAAMC,OAAO,GAAG;AACdC,IAAAA,GAAG,EAAG;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXkB;AAYdC,IAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAtBkB;AAuBdC,IAAAA,WAAW,EAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCkB,GAAhB;AAoCA,QAAMC,SAAS,GAAG9B,GAAG,CAAC0B,OAAO,CAACnB,KAAD,CAAR,CAArB;AACA,QAAM;AAAEwB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBjC,QAAQ,CAAC+B,SAAD,EAAY;AAC5CG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,OAAO,EAAE5B,KAAK,CAAC4B,OAAN,CAAcC,WAAd;AAAX,KADiC;AAE5CC,IAAAA,YAAY,EAAE;AAF8B,GAAZ,CAAlC;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AAEA,QAAMQ,YAAY,GAAG,CACnB;AACEC,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,SAAS,EAAE,OAFb;AAGEC,IAAAA,GAAG,EAAE,OAHP;AAIEC,IAAAA,MAAM,EAAEC,MAAM,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,MAAJ;AAJpB,GADmB,EAOnB;AACEJ,IAAAA,KAAK,EAAE,OADT;AAEEE,IAAAA,GAAG,EAAE,OAFP;AAGEC,IAAAA,MAAM,EAAEC,MAAM,iBAAI,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAEA,MAAM,CAAChB,KAAvB;AAA8B,MAAA,WAAW,EAAEtB,KAAK,CAACuC,eAAjD;AAAkE,MAAA,QAAQ,EAAE,EAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHpB,GAPmB,EAYnB;AACEL,IAAAA,KAAK,EAAE,UADT;AAEEE,IAAAA,GAAG,EAAE,UAFP;AAGED,IAAAA,SAAS,EAAE,UAHb;AAIEE,IAAAA,MAAM,EAAEC,MAAM,IAAI,IAAIhC,IAAJ,CAASgC,MAAM,GAAG,IAAlB,EAAwBE,WAAxB;AAJpB,GAZmB,EAkBnB;AACEN,IAAAA,KAAK,EAAE,aADT;AAEEE,IAAAA,GAAG,EAAE,aAFP;AAGEC,IAAAA,MAAM,EAAEC,MAAM,iBAAI,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAEA,MAAM,CAACf,WAAvB;AAAoC,MAAA,WAAW,EAAEvB,KAAK,CAACuC,eAAvD;AAAwE,MAAA,QAAQ,EAAE,EAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHpB,GAlBmB,EAuBnB;AACEL,IAAAA,KAAK,EAAE,aADT;AAEEE,IAAAA,GAAG,EAAE,OAFP;AAGED,IAAAA,SAAS,EAAE,OAHb;AAIEE,IAAAA,MAAM,EAAEC,MAAM,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI3C,WAAW,CAAC2C,MAAD,CAAf;AAJpB,GAvBmB,EA6BnB;AACEJ,IAAAA,KAAK,EAAE,OADT;AAEEE,IAAAA,GAAG,EAAE,OAFP;AAGED,IAAAA,SAAS,EAAE,OAHb;AAIEE,IAAAA,MAAM,EAAEC,MAAM,iBAAI,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAEA,MAAhB;AAAwB,MAAA,QAAQ,EAAE,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJpB,GA7BmB,EAmCnB;AACEJ,IAAAA,KAAK,EAAE,cADT;AAEEE,IAAAA,GAAG,EAAE,cAFP;AAGED,IAAAA,SAAS,EAAE,cAHb;AAIEE,IAAAA,MAAM,EAAEC,MAAM,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,MAAJ;AAJpB,GAnCmB,EAyCnB;AACEJ,IAAAA,KAAK,EAAE,SADT;AAEE;AACAG,IAAAA,MAAM,EAAEC,MAAM,iBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAEA,MAAM,CAAChB,KAAP,CAAaO,WAAb,OAA+B7B,KAAK,CAAC4B,OAAN,CAAcC,WAAd,EAD3C;AAEE,MAAA,OAAO,EAAE,YAAY;AACnB,cAAMY,YAAY,GAAG,MAAMzC,KAAK,CAAC0C,aAAN,CAAoBC,IAApB,CAAyBC,UAAzB,CAAoCN,MAAM,CAACO,KAAP,GAAe,CAAnD,CAA3B;AACA,cAAM7C,KAAK,CAAC8C,EAAN,CAAS;AACbC,UAAAA,EAAE,EAAE/C,KAAK,CAACgD,cAAN,CAAqBL,IAArB,CAA0Bf,OADjB;AAEbF,UAAAA,IAAI,EAAE1B,KAAK,CAACgD,cAAN,CAAqBL,IAArB,CAA0BM,SAA1B,CAAoCC,kBAApC,CACJ,mDADI,EAEJ,CAACZ,MAAM,CAACO,KAAP,GAAe,CAAhB,EAAmB7C,KAAK,CAAC4B,OAAzB,EAAkCa,YAAlC,CAFI;AAFO,SAAT,CAAN;AAOD,OAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAiBE,oBAAC,MAAD;AACE,MAAA,QAAQ,EACNH,MAAM,CAACf,WAAP,CAAmBM,WAAnB,OAAqC7B,KAAK,CAAC4B,OAAN,CAAcC,WAAd,EAArC,IACA1B,EAAE,GAAGmC,MAAM,CAACa,QADZ,IAEAb,MAAM,CAACc,KAAP,KAAiB,CAJrB;AAME,MAAA,OAAO,EAAE,YAAY;AACnB,cAAMX,YAAY,GAAG,MAAMzC,KAAK,CAAC0C,aAAN,CAAoBC,IAApB,CAAyBC,UAAzB,CAAoCN,MAAM,CAACO,KAAP,GAAe,CAAnD,CAA3B;AACA,cAAM7C,KAAK,CAAC8C,EAAN,CAAS;AACbC,UAAAA,EAAE,EAAE/C,KAAK,CAACgD,cAAN,CAAqBL,IAArB,CAA0Bf,OADjB;AAEbF,UAAAA,IAAI,EAAE1B,KAAK,CAACgD,cAAN,CAAqBL,IAArB,CAA0BM,SAA1B,CAAoCC,kBAApC,CACJ,gDADI,EAEJ,CAACZ,MAAM,CAACO,KAAP,GAAe,CAAhB,EAAmB7C,KAAK,CAAC4B,OAAzB,EAAkCa,YAAlC,CAFI;AAFO,SAAT,CAAN;AAOD,OAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjBF,eAoCE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAEH,MAAM,CAAChB,KAAP,CAAaO,WAAb,OAA+B7B,KAAK,CAAC4B,OAAN,CAAcC,WAAd,EAD3C;AAEE,MAAA,OAAO,EACL,MAAM;AACJ,cAAMgB,KAAK,GAAGP,MAAM,CAACO,KAAP,GAAe,CAA7B;AACA7C,QAAAA,KAAK,CAACqD,YAAN,CAAmBR,KAAnB;AACD,OAJI,CAKL;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApCF;AAJJ,GAzCmB,CAArB;AAkGA,QAAMS,UAAU,GAAG;AACjBC,IAAAA,OAAO,EAAE,OADQ;AAEjBC,IAAAA,MAAM,EAAE,MAFS;AAGjBC,IAAAA,UAAU,EAAE;AAHK,GAAnB;AAMA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD,CAAO,KAAP;AACE,IAAA,QAAQ,EAAEC,CAAC,IAAI;AACbxD,MAAAA,QAAQ,CAACwD,CAAC,CAACC,MAAF,CAASP,KAAV,CAAR;AACD,KAHH;AAIE,IAAA,KAAK,EAAEnD,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEqD,UAAd;AAA0B,IAAA,KAAK,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,eASE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,UAAd;AAA0B,IAAA,KAAK,EAAC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,eAYE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,UAAd;AAA0B,IAAA,KAAK,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAZF,CADF,eAiBE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,EAkBG5B,IAAI,gBAAG,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAEA,IAAI,CAACkC,KAAxB;AAA+B,IAAA,OAAO,EAAE3B,YAAxC;AAAsD,IAAA,MAAM,EAAC,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAA6E,WAlBpF,eAoBE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,eAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA0B9B,EAAE,IAAI,WAAhC,CArBF,eAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,eAuBE;AAAK,IAAA,KAAK,EAAE;AAAE0D,MAAAA,MAAM,EAAE,EAAV;AAAcL,MAAAA,MAAM,EAAE,GAAtB;AAA2BM,MAAAA,MAAM,EAAE,mBAAnC;AAAwDC,MAAAA,SAAS,EAAE;AAAnE,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEvD,cAAnB;AAAmC,IAAA,eAAe,MAAlD;AAAmD,IAAA,KAAK,EAAEW,eAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAvBF,CADF,CADF;AA+BD;;AAED,eAAepB,MAAf","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\n\nimport React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Radio, Button, Table, Divider } from \"antd\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { formatEther } from \"@ethersproject/units\";\nimport fetch from \"isomorphic-fetch\";\nimport GraphiQL from \"graphiql\";\nimport { Address } from \"../components\";\nimport \"graphiql/graphiql.min.css\";\n\nfunction Manage(props) {\n  const [query, setQuery] = useState(\"All\");\n  const ts = Math.floor(new Date().getTime() / 1000);\n\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    wills(first: 25, orderBy: deadline, orderDirection: desc) {\n      index\n      owner\n      beneficiary\n      deadline\n      value\n      token\n      tokenBalance\n    }\n  }\n  `;\n\n  const queries = {\n    All: `\n  {\n    wills(first: 25, orderBy: deadline, orderDirection: desc) {\n      index\n      owner\n      beneficiary\n      deadline\n      value\n    }\n  }\n  `,\n    owner: `\n  query Will($address:Bytes!){\n      wills(first: 25, orderBy: deadline, orderDirection: desc, where:{owner:$address}) {\n      index\n      owner\n      beneficiary\n      deadline\n      value\n    }\n  }\n  `,\n    beneficiary: `\n  query Will($address:Bytes!){\n      wills(first: 25, orderBy: deadline, orderDirection: desc,where:{beneficiary:$address}) {\n      index\n      owner\n      beneficiary\n      deadline\n      value\n    }\n  }\n  `,\n  };\n\n  const QUERY_GQL = gql(queries[query]);\n  const { loading, data } = useQuery(QUERY_GQL, {\n    variables: { address: props.address.toLowerCase() },\n    pollInterval: 10000,\n  });\n  console.log(loading);\n\n  const willsColumns = [\n    {\n      title: \"Will\",\n      dataIndex: \"index\",\n      key: \"index\",\n      render: record => <p>{record}</p>,\n    },\n    {\n      title: \"Owner\",\n      key: \"owner\",\n      render: record => <Address value={record.owner} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"TimeLock\",\n      key: \"deadline\",\n      dataIndex: \"deadline\",\n      render: record => new Date(record * 1000).toISOString(),\n    },\n    {\n      title: \"Beneficiary\",\n      key: \"beneficiary\",\n      render: record => <Address value={record.beneficiary} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"Balance ETH\",\n      key: \"value\",\n      dataIndex: \"value\",\n      render: record => <p>{formatEther(record)}</p>,\n    },\n    {\n      title: \"Token\",\n      key: \"token\",\n      dataIndex: \"token\",\n      render: record => <Address value={record} fontSize={16} />,\n    },\n    {\n      title: \"Amount Token\",\n      key: \"tokenBalance\",\n      dataIndex: \"tokenBalance\",\n      render: record => <p>{record}</p>,\n    },\n    {\n      title: \"Actions\",\n      // key: 'actions',\n      render: record => (\n        <div>\n          <Button\n            disabled={record.owner.toLowerCase() !== props.address.toLowerCase()}\n            onClick={async () => {\n              const totalBalance = await props.readContracts.Noun.ethBalance(record.index - 1);\n              await props.tx({\n                to: props.writeContracts.Noun.address,\n                data: props.writeContracts.Noun.interface.encodeFunctionData(\n                  \"defundWillETH(uint256, address payable , uint256)\",\n                  [record.index - 1, props.address, totalBalance],\n                ),\n              });\n            }}\n          >\n            withdraw\n          </Button>\n\n          <Button\n            disabled={\n              record.beneficiary.toLowerCase() !== props.address.toLowerCase() ||\n              ts < record.deadline ||\n              record.value === 0\n            }\n            onClick={async () => {\n              const totalBalance = await props.readContracts.Noun.ethBalance(record.index - 1);\n              await props.tx({\n                to: props.writeContracts.Noun.address,\n                data: props.writeContracts.Noun.interface.encodeFunctionData(\n                  \"BenefitETH(uint256, address payable , uint256)\",\n                  [record.index - 1, props.address, totalBalance],\n                ),\n              });\n            }}\n          >\n            claim\n          </Button>\n          <Button\n            disabled={record.owner.toLowerCase() !== props.address.toLowerCase()}\n            onClick={\n              () => {\n                const index = record.index - 1;\n                props.willSelector(index);\n              }\n              //\n            }\n          >\n            Update\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const radioStyle = {\n    display: \"block\",\n    height: \"30px\",\n    lineHeight: \"30px\",\n  };\n\n  return (\n    <>\n      <div>\n        <Radio.Group\n          onChange={e => {\n            setQuery(e.target.value);\n          }}\n          value={query}\n        >\n          <Radio style={radioStyle} value=\"All\">\n            All wills\n          </Radio>\n          <Radio style={radioStyle} value=\"owner\">\n            My wills\n          </Radio>\n          <Radio style={radioStyle} value=\"beneficiary\">\n            My inheritances\n          </Radio>\n        </Radio.Group>\n        <Divider />\n        {data ? <Table dataSource={data.wills} columns={willsColumns} rowKey=\"index\" /> : \"Loading..\"}\n\n        <Divider />\n        <span>Current timestamp: {ts || \"loading..\"}</span>\n        <br />\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Manage;\n"]},"metadata":{},"sourceType":"module"}